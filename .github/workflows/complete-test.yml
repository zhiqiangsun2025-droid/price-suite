name: 完整测试流程 (单元+集成+E2E)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # ========== Job 1: 单元测试 (Linux环境) ==========
  unit-tests-linux:
    name: 单元测试 (Linux)
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装依赖
      run: |
        pip install pytest pytest-cov pytest-mock
        pip install requests pandas openpyxl cryptography
    
    - name: 单元测试 - 工具函数
      run: |
        cd client
        # 测试不依赖GUI的函数
        python3 -c "
import sys
sys.path.insert(0, '.')
# 测试硬件ID生成
from modern_client_ultimate import get_hardware_id, get_config_path, Config
hw_id = get_hardware_id()
assert len(hw_id) == 32, f'硬件ID长度错误: {len(hw_id)}'
assert hw_id != 'HARDWARE_ERROR', '硬件ID生成失败'
print('✓ 硬件ID生成测试通过')

# 测试配置路径
config_path = get_config_path()
assert config_path.endswith('config.json'), f'配置路径错误: {config_path}'
print('✓ 配置路径测试通过')

# 测试配置类
assert Config.TRIAL_DURATION == 3600, '试用时长配置错误'
assert Config.WINDOW_WIDTH == 1400, '窗口宽度配置错误'
print('✓ 配置类测试通过')

print('\\n✅ 所有单元测试通过')
"
      continue-on-error: false

  # ========== Job 2: 集成测试 (Linux环境) ==========
  integration-tests:
    name: 集成测试 (API通信)
    runs-on: ubuntu-latest
    needs: unit-tests-linux
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装依赖
      run: |
        pip install requests pytest
    
    - name: 集成测试 - 模拟API调用
      run: |
        cd client
        python3 -c "
import requests
import json

# 测试服务器连接（使用公开API测试）
try:
    # 这里应该测试你的实际API，目前只测试网络功能
    response = requests.get('https://api.github.com', timeout=5)
    assert response.status_code == 200, f'HTTP请求失败: {response.status_code}'
    print('✓ HTTP请求功能正常')
    
    # 测试JSON处理
    data = {'test': 'data'}
    json_str = json.dumps(data, ensure_ascii=False)
    parsed = json.loads(json_str)
    assert parsed['test'] == 'data', 'JSON处理错误'
    print('✓ JSON处理功能正常')
    
    print('\\n✅ 集成测试通过')
except Exception as e:
    print(f'❌ 集成测试失败: {e}')
    exit(1)
"

  # ========== Job 3: Windows GUI测试 ==========
  gui-tests-windows:
    name: GUI测试 (Windows完整环境)
    runs-on: windows-latest
    needs: unit-tests-linux
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装完整依赖
      run: |
        pip install -r client/requirements_modern.txt
        pip install pytest pytest-qt pywinauto pillow
    
    - name: 验证GUI库可用
      run: |
        python -c "import customtkinter; print('✓ CustomTkinter可用')"
        python -c "import tkinter; print('✓ Tkinter可用')"
    
    - name: GUI基础测试
      run: |
        cd client
        python -c "
import customtkinter as ctk
print('✓ CustomTkinter导入成功')

# 测试能否创建窗口（不显示）
try:
    root = ctk.CTk()
    root.withdraw()  # 隐藏窗口
    print('✓ 可以创建CTk窗口')
    root.destroy()
    print('✓ 窗口销毁正常')
except Exception as e:
    print(f'❌ GUI测试失败: {e}')
    exit(1)

print('\\n✅ GUI基础测试通过')
"
    
    - name: 导入主程序测试
      run: |
        cd client
        python -c "
import sys
import os

# 测试能否导入主程序
try:
    import modern_client_ultimate
    print(f'✓ 主程序导入成功，版本: {modern_client_ultimate.VERSION}')
    print(f'✓ 服务器地址: {modern_client_ultimate.SERVER_URL}')
    print(f'✓ Config类存在: {hasattr(modern_client_ultimate, \"Config\")}')
    print(f'✓ Theme类存在: {hasattr(modern_client_ultimate, \"Theme\")}')
    print(f'✓ UltimateApp类存在: {hasattr(modern_client_ultimate, \"UltimateApp\")}')
    
    print('\\n✅ 主程序结构完整')
except Exception as e:
    print(f'❌ 主程序导入失败: {e}')
    import traceback
    traceback.print_exc()
    exit(1)
"

  # ========== Job 4: 端到端测试 (Windows) ==========
  e2e-tests-windows:
    name: 端到端测试 (E2E)
    runs-on: windows-latest
    needs: gui-tests-windows
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装依赖
      run: |
        pip install -r client/requirements_modern.txt
        pip install pywinauto pytest
    
    - name: E2E测试 - 应用启动
      run: |
        cd client
        python -c "
import sys
import threading
import time

# 测试应用能否创建（不阻塞测试）
def test_app_creation():
    try:
        import modern_client_ultimate
        # 注意：不调用mainloop，只测试实例化
        print('✓ 应用类可以导入')
        print(f'✓ 版本号: {modern_client_ultimate.VERSION}')
        print(f'✓ 配置完整: Trial={modern_client_ultimate.Config.TRIAL_DURATION}s')
        return True
    except Exception as e:
        print(f'❌ 应用创建失败: {e}')
        import traceback
        traceback.print_exc()
        return False

if test_app_creation():
    print('\\n✅ E2E基础测试通过')
    exit(0)
else:
    exit(1)
"
    
    - name: 截图测试（如果有显示服务器）
      run: |
        echo "📸 截图测试需要虚拟显示服务器"
        echo "当前环境：$env:OS"
      continue-on-error: true

  # ========== Job 5: 打包测试 ==========
  build-test:
    name: 打包测试
    runs-on: windows-latest
    needs: [unit-tests-linux, gui-tests-windows]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 安装依赖
      run: |
        pip install -r client/requirements_modern.txt
        pip install pyinstaller==6.3.0
    
    - name: 打包EXE
      run: |
        cd client
        # 不使用icon避免错误
        pyinstaller `
          --name="智能选品系统-20251021005" `
          --onefile `
          --windowed `
          --add-data="config_client.json;." `
          --hidden-import=PIL._tkinter_finder `
          --noconfirm `
          modern_client_ultimate.py
    
    - name: 验证EXE文件
      run: |
        $exePath = "client\dist\智能选品系统-20251021005.exe"
        if (Test-Path $exePath) {
          $fileSize = (Get-Item $exePath).Length / 1MB
          Write-Host "✅ EXE文件存在"
          Write-Host "📦 文件大小: $([math]::Round($fileSize, 2)) MB"
          
          if ($fileSize -gt 200) {
            Write-Host "⚠️  警告: 文件过大 (>200MB)"
          }
          
          $hash = Get-FileHash $exePath -Algorithm SHA256
          Write-Host "🔐 SHA256: $($hash.Hash)"
        } else {
          Write-Host "❌ EXE文件不存在"
          exit 1
        }
    
    - name: 上传EXE
      uses: actions/upload-artifact@v4
      with:
        name: 智能选品系统-Windows-20251021005
        path: client/dist/*.exe
        retention-days: 30

  # ========== Job 6: 测试报告 ==========
  test-report:
    name: 测试总结报告
    runs-on: ubuntu-latest
    needs: [unit-tests-linux, integration-tests, gui-tests-windows, e2e-tests-windows, build-test]
    if: always()
    
    steps:
    - name: 生成测试报告
      run: |
        echo "================================"
        echo "   测试执行总结"
        echo "================================"
        echo ""
        echo "✅ 单元测试 (Linux): ${{ needs.unit-tests-linux.result }}"
        echo "✅ 集成测试 (Linux): ${{ needs.integration-tests.result }}"
        echo "✅ GUI测试 (Windows): ${{ needs.gui-tests-windows.result }}"
        echo "✅ E2E测试 (Windows): ${{ needs.e2e-tests-windows.result }}"
        echo "✅ 打包测试 (Windows): ${{ needs.build-test.result }}"
        echo ""
        echo "================================"

